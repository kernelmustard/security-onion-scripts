#!/bin/bash

# SUDO check
if [[ ! $EUID == 0 ]]
then
   echo "This script must be run as root" 
   return 0
fi

function so-misp-install {
    ################### SETUP ###################
    # why is this imported?
    source /usr/sbin/so-common

    # some machines, incl security onion, alias cp to cp -i by default
    # this prompts you if overwriting
    # another solution is \cp
    alias cp='/bin/cp'

    # Grab configuration variables
    echo "Welcome to the Security Onion MISP Import Wizard!"
    read -p "IP of your MISP instance: " mispip
    read -p "API key: " apikey
    read -p "Configure NIDS rules? (yes/no): " nids_rules
    read -p "NIDS engine? (snort/suricata): " engine
    # need to test with Snort(?)
    read -p "Configure Zeek Intel data? (yes/no): " intel


    ## TODO verify good config values / do some more error handling

    # exit if no configuration selected or incorrect input
    if [[ ! $nids_rules == "yes" ]] && [[ ! $intel == "yes"  ]]
    then
	    echo "No rules or intel data selected to import.  Exiting ..."
	    return 0
    fi

    # Confirm configurations
    echo "The following configurations will be made: "

    if [[ $nids_rules == "yes" ]]
    then
	    echo "NIDS Rules: /opt/so/saltstack/local/salt/idstools/misp.rules"
    fi

    if [[ $intel == "yes" ]]
    then
	    #echo "Zeek Intel: /opt/so/saltstack/local/salt/zeek/policy/intel/misp-intel.dat"
        echo "Zeek Intel: /opt/so/saltstack/local/salt/zeek/policy/intel/intel.dat"
    fi

    echo "MISP Server: $mispip"
    echo "API Key: $apikey"
    read -p "Confirm? (yes/no): " confirm

    # If confirmed, continue with making changes
    if [[ $confirm == "yes" ]]
    then
    	echo "CONFIRMED!"
    else
	    echo "Configuration rejected, exiting ..."
	    return 0
    fi

    echo "Creating configuration file ..."
    # if configuration directory exists then pass, else create it
    if [ -d /etc/misp ]
    then
	    : #pass
    else
	    mkdir -p /etc/misp
    fi

    # copy and overwrite any existing config
    MISPCFG="/etc/misp/mispcfg" 
    cp securityonion-misp/mispcfg $MISPCFG

    echo "Setting desired values in $MISPCFG ..."
    # sed -i edits the file in place, meaning no need to create another file and write to the original from that
    # sed -i "s/<regex for existing line in config file>/<what line is replaced with>/g" <file to write to>
    sed -i "s/^MISP=\"\"$/MISP=\"$mispip\"/g" $MISPCFG
    sed -i "s/^APIKEY=\"\"$/APIKEY=\"$apikey\"/g" $MISPCFG
    sed -i "s/^INTEL=\"\"$/INTEL=\"$intel\"/g" $MISPCFG
    sed -i "s/^NIDS_RULES=\"\"$/NIDS_RULES=\"$nids_rules\"/g" $MISPCFG
    sed -i "s/^ENGINE=\"\"$/ENGINE=\"$engine\"/g" $MISPCFG
    # changed .*$ to =""$
    # need to test

    echo "Copying misp scripts into place ..."
    cp securityonion-misp/so-misp-install /usr/sbin/so-misp-install
    cp securityonion-misp/so-misp-download /usr/sbin/so-misp-download
    cp securityonion-misp/so-misp-uninstall /usr/sbin/so-misp-uninstall

    echo "Setting permissions ..."
    chmod +x /usr/sbin/so-misp-*

    ################### CONFIGURE ###################
    # import configured values
    source $MISPCFG

    echo "Configuring IDStools ..."
    if [[ $NIDS_RULES == "yes" ]]
    then
        #copy default config into local and edit it
        cp /opt/so/saltstack/default/$IDSTOOLS_CONF /opt/so/saltstack/local/$IDSTOOLS_CONF
        sed -i '/--local=\/opt\/so\/rules\/nids\/local.rules/a --local=/opt/so/rules/nids/misp.rules' /opt/so/saltstack/local/$IDSTOOLS_CONF
    fi

    echo "Configuring Zeek Intel ..."
    if [[ $INTEL == "yes" ]]
    then
        # copy default intel.dat and __load__.zeek to local config without prompting for overwrite
        cp /opt/so/saltstack/default/salt/zeek/policy/intel/* /opt/so/saltstack/local/salt/zeek/policy/intel/
        LOAD_ZEEK="/opt/so/saltstack/local/salt/zeek/policy/intel/__load__.zeek"

        # Add misp-intel to list of intel files
        # not doing because I don't understand. instead, writing to intel.dat in local config
        #sed -i 's#.*"/opt/zeek/share/zeek/policy/intel/intel.dat"#        "/opt/zeek/share/zeek/policy/intel/intel.dat",#' $LOAD_ZEEK
        #sed -i '/.*intel.dat",/a \ \ \ \ \ \ \ \ "\/opt\/zeek\/share\/zeek\/policy\/intel\/misp-intel.dat\"' $LOAD_ZEEK
    fi

    echo "Setting so-misp-download cron job ..."
    # if file exists
    if [ -f /etc/cron.d/so-misp-download ] # [ ] equivalent to test -f
    then
        :	# do nothing and pass ahead
    else
        touch /etc/cron.d/so-misp-download	# create file
        # uses heredoc format to read until "EOF" is seen, then outputs to /etc/cron.d/so-misp-download
        cat << bingus > /etc/cron.d/so-misp-download
# /etc/cron.d/so-misp-download
#
# crontab entry to update MISP IDS rules

SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

01 6    * * *   root    /usr/sbin/so-misp-download > /dev/null 2>&1
bingus
    fi	

    echo "Running so-misp-download ..."
    /usr/sbin/so-misp-download

    if [[ $INTEL == "yes" ]]
    then
        echo "Updating Zeek state.."
        salt "*" state.apply zeek
    fi
    
    if [[ $NIDS_RULES == "yes" ]]
    then
	    echo "Updating IDSTools state ..."
	    salt "*" state.apply idstools

        echo "Updating rules ..."
        /usr/sbin/so-rule-update
    fi
    echo "DONE!"
}

so-misp-install